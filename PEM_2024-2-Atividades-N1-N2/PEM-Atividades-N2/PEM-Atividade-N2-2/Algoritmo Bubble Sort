/*--------------------------------------------------------*

* Disciplina: Programaçao Estruturada e Modular *

*          Prof. Carlos Veríssimo *

*--------------------------------------------------------*

* Objetivo do Programa: Comparando ordenação "Bubble Sort" com ordenação por inserção *

* Data - 11/10/2024 * 

* Autor: Paulo Ricardo Ferreira Brito *
*--------------------------------------------------------*/

#include <stdio.h>
#include <time.h> 

// Função que executa o Bubble Sort em um array
void bubbleSort(int array[], int n, int *num_trocas, int *num_ciclos) {
    int i, j, temp;
    *num_trocas = 0;
    *num_ciclos = 0;
    
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            (*num_ciclos)++;  // Incrementa o número de ciclos
            if (array[j] > array[j + 1]) {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
                (*num_trocas)++;  // Incrementa o número de trocas
            }
        }
    }
}

// Função para imprimir o array
void printPosicaoInicial(int array[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main() {
    clock_t start, end;  
    double cpu_time_used;
    int num_trocas, num_ciclos;

    int array[] = {5, 3, 8, 4, 2, 115, 113, 118, 114, 112,
                   125, 123, 128, 124, 122, 35, 33, 38, 34, 
                   32, 45, 43, 48, 44, 42, 55, 53, 58, 54, 52,
                   65, 63, 68, 64, 62, 75, 73, 78, 74, 72,
                   85, 83, 88, 84, 82, 95, 93, 98, 94, 92,
                   15, 13, 18, 14, 12, 25, 23, 28, 24, 22};
    
    int n = sizeof(array) / sizeof(array[0]); // Calcula o tamanho do array

    printf("Array na posição original: \n");
    printPosicaoInicial(array, n);

    // Início da medição de tempo
    start = clock();

    bubbleSort(array, n, &num_trocas, &num_ciclos);

    // Fim da medição de tempo
    end = clock();

    printf("\nArray após a ordenação: \n");
    printPosicaoInicial(array, n);

    // Cálculo do tempo de CPU
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("\nTempo de execução: %f segundos\n", cpu_time_used);
    
    // Exibição do número de trocas e ciclos
     printf("Número de trocas: %d\n", num_trocas);
    printf("Número de ciclos: %d\n", num_ciclos);
   
    
    return 0;
}

