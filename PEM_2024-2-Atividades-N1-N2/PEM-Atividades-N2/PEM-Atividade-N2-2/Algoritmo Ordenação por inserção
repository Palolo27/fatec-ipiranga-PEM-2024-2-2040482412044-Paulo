/*-------------------------------------------------------------*
* Disciplina: Programação Estruturada e Modular                *
*          Prof. Carlos Veríssimo                              *
*--------------------------------------------------------------*
* Objetivo do Programa: ORDENAÇÃO POR INSERÇÃO                 *
*                                                              *
* Data: 04/10/2024                                             * 
* Autor: Letícia Sudan Gauy e Fernando Palmieri                *
*--------------------------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Ordena um array usando o algoritmo de ordenação por inserção
void ordenacaoInsercao(int numeros[], int quantidade, int *num_ciclos, int *num_trocas) {
    int i, elemento, posicao;
    *num_ciclos = 0;  // Inicializa o contador de ciclos
    *num_trocas = 0;  // Inicializa o contador de trocas
    
    for (i = 1; i < quantidade; i++) {
        elemento = numeros[i]; // Elemento a ser inserido
        posicao = i - 1;
        (*num_ciclos)++;  // Conta a primeira iteração do ciclo externo

        // Move elementos maiores para a direita
        while (posicao >= 0 && numeros[posicao] > elemento) {
            numeros[posicao + 1] = numeros[posicao];
            posicao--;
            (*num_trocas)++;  // Conta cada troca dentro do while
            (*num_ciclos)++;  // Conta cada iteração do while
        }
        numeros[posicao + 1] = elemento; // Insere o elemento na posição correta
    }
}

// Imprime o array
void imprimirArray(int numeros[], int quantidade) {
    for (int i = 0; i < quantidade; i++)
        printf("%d ", numeros[i]);
    printf("\n");
}

int main() {
    
    // Definindo o array com os valores fornecidos
      int numeros[] = {5, 3, 8, 4, 2, 115, 113, 118, 114, 112,
                   125, 123, 128, 124, 122, 35, 33, 38, 34, 
                   32, 45, 43, 48, 44, 42, 55, 53, 58, 54, 52,
                   65, 63, 68, 64, 62, 75, 73, 78, 74, 72,
                   85, 83, 88, 84, 82, 95, 93, 98, 94, 92,
                   15, 13, 18, 14, 12, 25, 23, 28, 24, 22};

    // Calculando a quantidade de elementos do array
    int quantidadeNumeros = sizeof(numeros) / sizeof(numeros[0]);

    // Variáveis para contar ciclos e trocas
    int num_ciclos, num_trocas;
    
    // Variáveis para medir o tempo de execução
    clock_t start, end;
    double cpu_time_used;

    printf("Array original: \n");
    imprimirArray(numeros, quantidadeNumeros);
    
    // Início da medição de tempo
    start = clock();

    // Ordena o array e conta ciclos e trocas
    ordenacaoInsercao(numeros, quantidadeNumeros, &num_ciclos, &num_trocas);
    
    // Fim da medição de tempo
    end = clock();

    printf("\nArray ordenado: \n");
    imprimirArray(numeros, quantidadeNumeros);

    
    // Cálculo do tempo de CPU usado
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("\nTempo de execução: %f segundos", cpu_time_used);
    
    // Exibe o número de ciclos e trocas
    printf("\nNúmero de trocas: %d\n", num_trocas);
    printf("Número de ciclos: %d\n", num_ciclos);
    
    

    return 0;
}
